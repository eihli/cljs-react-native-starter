{"version":3,"sources":["cljs/reader.cljs"],"mappings":"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","names":["cljs.reader/zero-fill-right-and-truncate","s","width","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","b","js/goog.string.StringBuffer","cljs.reader/divisible?","num","div","cljs.core/mod","cljs.reader/indivisible?","cljs.reader/leap-year?","year","cljs.reader/days-in-month","dim-norm","dim-leap","month","leap-year?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.reader/timestamp-regex","cljs.reader/parse-int","n","js/parseInt","cljs.core/not","js/isNaN","cljs.reader/check","low","high","msg","js/Error","cljs.reader/parse-and-validate-timestamp","vec__28297","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","years","months","days","hours","minutes","seconds","fraction","offset-sign","offset-hours","offset-minutes","v","cljs.core/re-matches","or__4185__auto__","offset","G__28303","G__28304","cljs.reader/parse-timestamp","ts","temp__5733__auto__","vec__28306","ms","js/Date","cljs.reader/read-date","cljs.reader/read-queue","elems","cljs.core/vector?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentQueue","cljs.reader/read-js","form","arr","seq__28340","cljs.core/seq","chunk__28341","count__28342","i__28343","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","x","cljs.core/map?","obj","seq__28346","chunk__28347","count__28348","i__28349","vec__28375","vec__28384","k","G__28379","G__28380","G__28381","G__28387","G__28388","G__28389","goog.object/set","cljs.core/name","cljs.reader/read-uuid","uuid","cljs.core/uuid","cljs.reader/*default-data-reader-fn*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.reader/*tag-table*","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","var_args","G__28402","cljs.reader/read","p__28403","map__28407","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","reader","cljs.core/deref","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$2","eof","opts","cljs.core.update.cljs$core$IFn$_invoke$arity$3","m","eof-error?","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$4","G__28423","cljs.reader/read-string","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$2","cljs.reader/register-tag-parser!","tag","f","old-parser","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.reader/deregister-tag-parser!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","cljs.reader/register-default-tag-parser!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.reader/deregister-default-tag-parser!"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.reader\n  (:require-macros [cljs.reader :refer [add-data-readers]])\n  (:require [goog.object :as gobject]\n            [cljs.tools.reader :as treader]\n            [cljs.tools.reader.edn :as edn])\n  (:import [goog.string StringBuffer]))\n\n(defn ^:private zero-fill-right-and-truncate [s width]\n  (cond\n    (= width (count s)) s\n    (< width (count s)) (subs s 0 width)\n    :else\n    (loop [b (StringBuffer. s)]\n      (if (< (.getLength b) width)\n        (recur (.append b \"0\"))\n        (.toString b)))))\n\n(defn ^:private divisible?\n  [num div]\n  (zero? (mod num div)))\n\n(defn ^:private indivisible?\n  [num div]\n  (not (divisible? num div)))\n\n(defn ^:private leap-year?\n  [year]\n  (and (divisible? year 4)\n       (or (indivisible? year 100)\n           (divisible? year 400))))\n\n(def ^:private days-in-month\n  (let [dim-norm [nil 31 28 31 30 31 30 31 31 30 31 30 31]\n        dim-leap [nil 31 29 31 30 31 30 31 31 30 31 30 31]]\n    (fn [month leap-year?]\n      (get (if leap-year? dim-leap dim-norm) month))))\n\n(def ^:private timestamp-regex #\"(\\d\\d\\d\\d)(?:-(\\d\\d)(?:-(\\d\\d)(?:[T](\\d\\d)(?::(\\d\\d)(?::(\\d\\d)(?:[.](\\d+))?)?)?)?)?)?(?:[Z]|([-+])(\\d\\d):(\\d\\d))?\")\n\n(defn ^:private parse-int [s]\n  (let [n (js/parseInt s 10)]\n    (if-not (js/isNaN n)\n      n)))\n\n(defn ^:private check [low n high msg]\n  (when-not (<= low n high)\n    (throw (js/Error. (str msg \" Failed:  \" low \"<=\" n \"<=\" high))))\n  n)\n\n(defn parse-and-validate-timestamp [s]\n  (let [[_ years months days hours minutes seconds fraction offset-sign offset-hours offset-minutes :as v]\n        (re-matches timestamp-regex s)]\n    (if-not v\n      (throw (js/Error. (str \"Unrecognized date/time syntax: \" s)))\n      (let [years (parse-int years)\n            months (or (parse-int months) 1)\n            days (or (parse-int days) 1)\n            hours (or (parse-int hours) 0)\n            minutes (or (parse-int minutes) 0)\n            seconds (or (parse-int seconds) 0)\n            fraction (or (parse-int (zero-fill-right-and-truncate fraction 3)) 0)\n            offset-sign (if (= offset-sign \"-\") -1 1)\n            offset-hours (or (parse-int offset-hours) 0)\n            offset-minutes (or (parse-int offset-minutes) 0)\n            offset (* offset-sign (+ (* offset-hours 60) offset-minutes))]\n        [years\n         (check 1 months 12 \"timestamp month field must be in range 1..12\")\n         (check 1 days (days-in-month months (leap-year? years)) \"timestamp day field must be in range 1..last day in month\")\n         (check 0 hours 23 \"timestamp hour field must be in range 0..23\")\n         (check 0 minutes 59 \"timestamp minute field must be in range 0..59\")\n         (check 0 seconds (if (= minutes 59) 60 59) \"timestamp second field must be in range 0..60\")\n         (check 0 fraction 999 \"timestamp millisecond field must be in range 0..999\")\n         offset]))))\n\n(defn parse-timestamp\n  [ts]\n  (if-let [[years months days hours minutes seconds ms offset]\n           (parse-and-validate-timestamp ts)]\n    (js/Date.\n      (- (.UTC js/Date years (dec months) days hours minutes seconds ms)\n        (* offset 60 1000)))\n    (throw (js/Error. (str \"Unrecognized date/time syntax: \" ts)))))\n\n(defn ^:private read-date\n  [s]\n  (if (string? s)\n    (parse-timestamp s)\n    (throw (js/Error. \"Instance literal expects a string for its timestamp.\"))))\n\n(defn ^:private read-queue\n  [elems]\n  (if (vector? elems)\n    (into cljs.core/PersistentQueue.EMPTY elems)\n    (throw (js/Error. \"Queue literal expects a vector for its elements.\"))))\n\n(defn ^:private read-js\n  [form]\n  (cond\n    (vector? form)\n    (let [arr (array)]\n      (doseq [x form]\n        (.push arr x))\n      arr)\n\n    (map? form)\n    (let [obj (js-obj)]\n      (doseq [[k v] form]\n        (gobject/set obj (name k) v))\n      obj)\n\n    :else\n    (throw\n      (js/Error.\n        (str \"JS literal expects a vector or map containing \"\n             \"only string or unqualified keyword keys\")))))\n\n(defn ^:private read-uuid\n  [uuid]\n  (if (string? uuid)\n    (cljs.core/uuid uuid)\n    (throw (js/Error. \"UUID literal expects a string as its representation.\"))))\n\n(def ^:dynamic *default-data-reader-fn*\n  (atom nil))\n\n(def ^:dynamic *tag-table*\n  (atom\n    (add-data-readers\n      {'inst  read-date\n       'uuid  read-uuid\n       'queue read-queue\n       'js    read-js})))\n\n(defn read\n  \"Reads the first object from an cljs.tools.reader.reader-types/IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.\"\n  ([reader]\n   (edn/read\n     {:readers @*tag-table*\n      :default @*default-data-reader-fn*\n      :eof nil}\n     reader))\n  ([{:keys [eof] :as opts} reader]\n   (edn/read\n     (update (merge opts {:default @*default-data-reader-fn*})\n       :readers (fn [m] (merge @*tag-table* m))) reader))\n  ([reader eof-error? eof opts]\n   (edn/read reader eof-error? eof\n     (update (merge opts {:default @*default-data-reader-fn*})\n       :readers (fn [m] (merge @*tag-table* m))))))\n\n(defn read-string\n  \"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read\"\n  ([s]\n   (edn/read-string\n     {:readers @*tag-table*\n      :default @*default-data-reader-fn*\n      :eof nil} s))\n  ([opts s]\n   (edn/read-string\n     (update (merge {:default @*default-data-reader-fn*} opts)\n       :readers (fn [m] (merge @*tag-table* m))) s)))\n\n(defn register-tag-parser!\n  [tag f]\n  (let [old-parser (get @*tag-table* tag)]\n    (swap! *tag-table* assoc tag f)\n    old-parser))\n\n(defn deregister-tag-parser!\n  [tag]\n  (let [old-parser (get @*tag-table* tag)]\n    (swap! *tag-table* dissoc tag)\n    old-parser))\n\n(defn register-default-tag-parser!\n  [f]\n  (let [old-parser @*default-data-reader-fn*]\n    (swap! *default-data-reader-fn* (fn [_] f))\n    old-parser))\n\n(defn deregister-default-tag-parser!\n  []\n  (let [old-parser @*default-data-reader-fn*]\n    (swap! *default-data-reader-fn* (fn [_] nil))\n    old-parser))\n"]}