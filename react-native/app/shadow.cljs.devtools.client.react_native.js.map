{"version":3,"sources":["shadow/cljs/devtools/client/react_native.cljs"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.react-native","js/shadow.cljs.devtools.client.react-native.repl-ns-ref","shadow.cljs.devtools.client.react-native/repl-ns-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/shadow.cljs.devtools.client.react-native.socket-ref","shadow.cljs.devtools.client.react-native/socket-ref","cljs.core/volatile!","shadow.cljs.devtools.client.react-native/ws-msg","msg","temp__5733__auto__","cljs.core/deref","s","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/console.warn","shadow.cljs.devtools.client.react-native/loaded?","js/goog.isProvided_","shadow.cljs.devtools.client.react-native/goog-is-loaded?","name","js/$CLJS.SHADOW_ENV.isLoaded","shadow.cljs.devtools.client.react-native/goog-base-rc","var_args","G__29932","shadow.cljs.devtools.client.react-native/devtools-msg","js/Error","x","js/console.log","y","p__29933","map__29934","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.react-native/src-is-loaded?","resource-id","output-name","src","or__4185__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.react-native/script-eval","code","js/goog.global.eval","shadow.cljs.devtools.client.react-native/do-js-load","sources","seq__29936","cljs.core/seq","chunk__29937","count__29938","i__29939","map__29960","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__29970","cljs.core/first","cljs.core/next","resource-name","js","shadow.cljs.devtools.client.react_native.devtools_msg.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/before-load-src","shadow.cljs.devtools.client.react-native/do-js-reload","complete-fn","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","fn-sym","shadow.cljs.devtools.client.react_native.devtools_msg.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.react-native/load-sources","callback","cljs.core/empty?","G__29987","G__29988","G__29989","G__29990","G__29991","G__29992","goog.net.XhrIo/send","shadow.cljs.devtools.client.env/files-url","res","req","content","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","shadow.cljs.devtools.client.react-native/noop","seq29993","self__4777__auto__","args","p__29995","map__29996","shadow.cljs.devtools.client.react-native/handle-build-complete","info","reload-info","map__29999","compiled","warnings","iter__4582__auto__","s__30002","cljs.core/LazySeq","xs__6292__auto__","map__30007","iterys__4578__auto__","s__30004","c__4580__auto__","size__4581__auto__","b__30006","cljs.core/chunk-buffer","i__30005","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30003","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__30001","cljs.core/not","warning","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/autoload","shadow.cljs.devtools.client.env/ignore-warnings","sources-to-get","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__30020","map__30022","ns","cljs.core/contains?","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__30017","map__30018","p1__29994#","shadow.cljs.devtools.client.react-native/repl-error","e","js/console.error","shadow.cljs.devtools.client.env/repl-error","p__30032","map__30037","shadow.cljs.devtools.client.react-native/repl-invoke","id","result","shadow.cljs.devtools.client.env/repl-call","js/eval","p__30048","map__30049","shadow.cljs.devtools.client.react-native/repl-require","reload-namespaces","js-requires","done","sources-to-load","p__30051","map__30052","provides","and__4174__auto__","cljs.core/some","p__30055","map__30056","shadow.cljs.devtools.client.react-native/repl-init","repl-state","cljs.core/reset!","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__30081","map__30082","shadow.cljs.devtools.client.react-native/repl-set-ns","p__30084","map__30085","shadow.cljs.devtools.client.react-native/handle-message","type","G__30087","cljs.core/Keyword","js/Date.now","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/async-ops","shadow.cljs.devtools.client.react-native/ws-connect","ws-url","shadow.cljs.devtools.client.env/ws-url","socket","js/WebSocket","cljs.core/vreset!","shadow.cljs.devtools.client.env/process-ws-msg","shadow.cljs.devtools.client.env/module-format","js/goog","js/goog.constructNamespace_","shadow.cljs.devtools.client.env/set-print-fns!","shadow.cljs.devtools.client.env/reset-print-fns!","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","clojure.string.index_of.cljs$core$IFn$_invoke$arity$3","shadow.cljs.devtools.client.env/enabled"],"sourcesContent":["(ns shadow.cljs.devtools.client.react-native\n  (:require\n    [clojure.string :as str]\n    [cljs.reader :as reader]\n    [goog.object :as gobj]\n    [goog.net.XhrIo :as xhr]\n    [shadow.cljs.devtools.client.env :as env]\n    ))\n\n(defonce repl-ns-ref (atom nil))\n\n(defonce socket-ref (volatile! nil))\n\n(defn ws-msg [msg]\n  (if-let [s @socket-ref]\n    (.send s (pr-str msg))\n    (js/console.warn \"WEBSOCKET NOT CONNECTED\" (pr-str msg))))\n\n(def loaded? js/goog.isProvided_)\n\n(defn goog-is-loaded? [name]\n  (js/$CLJS.SHADOW_ENV.isLoaded name))\n\n(def goog-base-rc\n  [:shadow.build.classpath/resource \"goog/base.js\"])\n\n(defn devtools-msg\n  ([x]\n   (js/console.log x))\n  ([x y]\n   (js/console.log x y)))\n\n(defn src-is-loaded? [{:keys [resource-id output-name] :as src}]\n  ;; FIXME: don't like this special case handling, but goog/base.js will always be loaded\n  ;; but not as a separate file\n  (or (= goog-base-rc resource-id)\n      (goog-is-loaded? output-name)))\n\n(defn script-eval [code]\n  (js/goog.global.eval code))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-name js] :as src} sources]\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload [msg sources complete-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      (fn [fn-sym]\n        (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn))\n\n(defn load-sources [sources callback]\n  (if (empty? sources)\n    (callback [])\n    (xhr/send\n      (env/files-url)\n      (fn [res]\n        (this-as ^goog req\n          (let [content\n                (-> req\n                    (.getResponseText)\n                    (reader/read-string))]\n            (callback content)\n            )))\n      \"POST\"\n      (pr-str {:client :browser\n               :sources (into [] (map :resource-id) sources)})\n      #js {\"content-type\" \"application/edn; charset=utf-8\"})))\n\n(defn noop [& args])\n\n(defn handle-build-complete [{:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (when (and env/autoload\n               (or (empty? warnings) env/ignore-warnings))\n\n      (let [sources-to-get\n            (->> sources\n                 ;; don't reload namespaces that have ^:dev/never-reload meta\n                 (remove (fn [{:keys [ns]}]\n                           (contains? (:never-load reload-info) ns)))\n                 (filter\n                   (fn [{:keys [ns resource-id] :as src}]\n                     (or (contains? (:always-load reload-info) ns)\n                         (not (src-is-loaded? src))\n                         (and (contains? compiled resource-id)\n                              ;; never reload files from jar\n                              ;; they can't be hot-swapped so the only way they get re-compiled\n                              ;; is if they have warnings, which we can't to anything about\n                              (not (:from-jar src))))))\n                 (into []))]\n\n        (when (seq sources-to-get)\n          (load-sources sources-to-get #(do-js-reload msg % noop))\n          )))))\n\n(defn repl-error [e]\n  (js/console.error \"repl/invoke error\" (.-message e) e)\n  (env/repl-error e))\n\n(defn repl-invoke [{:keys [id js]}]\n  (let [result (env/repl-call #(js/eval js) repl-error)]\n    (-> result\n        (assoc :id id)\n        (ws-msg))))\n\n(defn repl-require [{:keys [id sources reload-namespaces js-requires] :as msg} done]\n  (let [sources-to-load\n        (->> sources\n             (remove (fn [{:keys [provides] :as src}]\n                       (and (src-is-loaded? src)\n                            (not (some reload-namespaces provides)))))\n             (into []))]\n\n    (load-sources\n      sources-to-load\n      (fn [sources]\n        (do-js-load sources)\n        (ws-msg {:type :repl/require-complete :id id})\n        (done)\n        ))))\n\n(defn repl-init [{:keys [repl-state id]} done]\n  (reset! repl-ns-ref (get-in repl-state [:current :ns]))\n  (load-sources\n    ;; maybe need to load some missing files to init REPL\n    (->> (:repl-sources repl-state)\n         (remove src-is-loaded?)\n         (into []))\n    (fn [sources]\n      (do-js-load sources)\n      (ws-msg {:type :repl/init-complete :id id})\n      (devtools-msg \"REPL init successful\")\n      (done))))\n\n(defn repl-set-ns [{:keys [id ns]}]\n  (reset! repl-ns-ref ns)\n  (ws-msg {:type :repl/set-ns-complete :id id :ns ns}))\n\n;; FIXME: core.async-ify this\n(defn handle-message [{:keys [type] :as msg} done]\n  ;; (js/console.log \"ws-msg\" (pr-str msg))\n  (case type\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/require\n    (repl-require msg done)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/init\n    (repl-init msg done)\n\n    :repl/ping\n    (ws-msg {:type :repl/pong :time-server (:time-server msg) :time-runtime (js/Date.now)})\n\n    :build-complete\n    (handle-build-complete msg)\n\n    :build-failure\n    nil\n\n    :build-init\n    nil\n\n    :build-start\n    nil\n\n    :pong\n    nil\n\n    :client/stale\n    (devtools-msg \"Stale Client! You are not using the latest compilation output!\")\n\n    :client/no-worker\n    (devtools-msg (str \"watch for build \\\"\" env/build-id \"\\\" not running\"))\n\n    ;; default\n    :ignored)\n\n  (when-not (contains? env/async-ops type)\n    (done)))\n\n(defn ws-connect []\n  (let [ws-url\n        (env/ws-url :react-native)\n\n        socket\n        (js/WebSocket. ws-url)]\n\n\n    (vreset! socket-ref socket)\n\n    (set! (.-onmessage socket)\n      (fn [e]\n        (env/process-ws-msg (. e -data) handle-message)\n        ))\n\n    (set! (.-onopen socket)\n      (fn [e]\n        ;; :module-format :js already patches provide\n        (when (= \"goog\" env/module-format)\n          ;; patch away the already declared exception\n          (set! (.-provide js/goog) js/goog.constructNamespace_))\n\n        (env/set-print-fns! ws-msg)\n\n        (devtools-msg \"WebSocket connected!\")\n        ))\n\n    (set! (.-onclose socket)\n      (fn [e]\n        ;; not a big fan of reconnecting automatically since a disconnect\n        ;; may signal a change of config, safer to just reload the page\n        (devtools-msg \"WebSocket disconnected!\")\n        (vreset! socket-ref nil)\n        (env/reset-print-fns!)\n        ))\n\n    (set! (.-onerror socket)\n      (fn [e]\n        (js/console.error (str \"WebSocket connect failed:\" (.-message e) \"\\n\"\n                               \"It was trying to connect to: \" (subs ws-url 0 (str/index-of ws-url \"/\" 6)) \"\\n\"))))\n\n    ))\n\n(when ^boolean env/enabled\n  ;; disconnect an already connected socket, happens if this file is reloaded\n  ;; pretty much only for me while working on this file\n  (when-let [s @socket-ref]\n    (devtools-msg \"connection reset!\")\n    (set! (.-onclose s) (fn [e]))\n    (.close s)\n    (vreset! socket-ref nil))\n\n  (ws-connect))\n"]}